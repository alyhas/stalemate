@import '../tokens';

// Responsive Embeds / Aspect Ratios
// Used for embedding videos (e.g., YouTube, Vimeo) or other iframes
// that need to maintain an aspect ratio as they scale.

.embed-responsive {
  position: relative;
  display: block;
  width: 100%;
  padding: 0;
  overflow: hidden;

  &::before { // This pseudo-element creates the intrinsic ratio
    display: block;
    content: "";
  }

  .embed-responsive-item,
  iframe,
  embed,
  object,
  video {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
  }
}

// Common Aspect Ratios
// Add more as needed. The padding-bottom percentage is (height / width) * 100.
.embed-responsive-21by9::before {
  padding-bottom: percentage(9 / 21);
}

.embed-responsive-16by9::before {
  padding-bottom: percentage(9 / 16);
}

.embed-responsive-4by3::before {
  padding-bottom: percentage(3 / 4);
}

.embed-responsive-1by1::before {
  padding-bottom: percentage(1 / 1);
}


// Basic Media Object (classic layout for image/icon next to text content)
.media {
  display: flex;
  align-items: flex-start; // Align items to the top
  margin-bottom: $spacing-lg; // Default spacing

  .media-figure { // For the image, icon, or video thumbnail
    margin-right: $spacing-md;
    // flex-shrink: 0; // Prevent figure from shrinking if media-body content is long
  }

  .media-body {
    flex: 1; // Allow body to take up remaining space
    min-width: 0; // Fix for flexbox bug with long content

    h1, h2, h3, h4, h5, h6 {
      margin-top: 0; // Remove default top margin from headings
    }
  }
}

// Media Player (placeholder for custom video/audio player styling)
.media-player {
  position: relative;
  background-color: $dark-gray; // Default dark background for players
  border-radius: $border-radius;
  overflow: hidden; // Ensure controls or overlays stay within bounds
  box-shadow: $box-shadow;

  video, audio {
    display: block; // Remove extra space below inline elements
    width: 100%;
    height: auto; // Maintain aspect ratio by default
  }

  // Placeholder for custom controls overlay
  .media-controls {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: $spacing-sm $spacing-md;
    background-color: rgba(0, 0, 0, 0.5); // Semi-transparent overlay
    color: #fff;
    opacity: 0; // Hidden by default, shown on hover/focus or via JS
    transition: opacity 0.2s ease-in-out;

    // Example: Play/pause button, progress bar, volume
    // .btn-play-pause { ... }
    // .progress-bar { ... }
    // .volume-control { ... }
  }

  &:hover .media-controls,
  &:focus-within .media-controls { // Show controls on hover or when an element inside has focus
    opacity: 1;
  }
}

// Image Framing / Styling
.img-fluid { // Bootstrap's class name for responsive images
  max-width: 100%;
  height: auto;
}

.img-thumbnail {
  padding: $spacing-xs;
  background-color: $light-gray;
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  max-width: 100%;
  height: auto;
  box-shadow: $box-shadow-sm;
}

// Figure element for images with captions
.figure {
  display: inline-block; // To allow text-align to center it if needed
  margin-bottom: $spacing-md;

  .figure-img {
    margin-bottom: $spacing-sm; // Space between image and caption
    line-height: 1; // Remove any extra space below the image
  }

  .figure-caption {
    font-size: $font-size-sm * 0.9; // Smaller font for captions
    color: lighten($dark-gray, 20%);
    text-align: center; // Example: center caption text
  }
}


// Video Player specific styling (if different from generic media-player)
.video-player {
  // Inherits from .media-player or can have its own specific styles
  // e.g., for custom play button overlay in the center
  .play-button-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    // Style your play button (e.g., large icon)
    // z-index: 1; // Ensure it's above the video but below controls if they overlap
  }
}

// Styles for the application's main video display area
.media-container {
  background-color: var(--media-background-color, #000); // Default to black, can be themed
  padding: $spacing-xs; // Small padding to act as part of the frame
  border-radius: $border-radius; // Consistent border radius
  border: 1px solid var(--media-border-color, $dark-gray); // Subtle border
  box-shadow: $box-shadow-sm; // Optional: a very subtle shadow for depth
  width: 100%; // Take full width of its parent in .workspace
  // max-width: 800px; // Example max-width if needed
  margin: 0 auto; // Center if max-width is applied
  display: flex; // To help center video or manage aspect ratio if needed
  justify-content: center;
  align-items: center;
  overflow: hidden; // Ensure border-radius clips video stream

  // Styles for when PiP mode is active (from issue example)
  &.picture-in-picture {
    // Example: .video-stream might be hidden or styled differently
    // .video-stream { display: none; }
    // background-image: url('/pip-placeholder.svg'); // Show a placeholder
    // background-repeat: no-repeat;
    // background-position: center;
    // background-size: contain;
    // For now, just a visual cue:
    border-style: dashed;
  }

  // Styles for when videoStream is present (from App.tsx logic, not directly from issue example class)
  // This class would be dynamically applied in App.tsx if needed, e.g. if videoStream is not null.
  // For now, assuming .video-stream visibility is handled by `cn({ hidden: !videoStream })` in App.tsx.
  // &.active {
  //   // Styles when video is active
  // }
}

.video-stream {
  display: block;
  width: 100%;
  height: 100%; // Fill the .media-container height
  max-height: 100%; // Fill the .media-container height
  object-fit: contain; // Maintain aspect ratio within the container bounds
  // The border-radius should ideally match the container's inner radius.
  // If .media-container has padding: $spacing-xs, this is correct.
  // If .media-container padding is $spacing-md (from main-content.scss), this should be calc(#{$border-radius} - #{$spacing-md})
  // For now, assume $spacing-xs is the effective inner padding for the video frame.
  border-radius: calc(#{$border-radius} - #{$spacing-xs});
  background-color: #111; // Fallback/letterbox color
}
