@import '../tokens'; // To access base SCSS variables like $primary-color, $light-gray etc.

// Light Theme Styles
// If .theme-light is applied, it ensures these CSS custom properties are set.
// These values should match the defaults set in :root in tokens.scss.
// This class is useful if the default state (no theme class) is different,
// or for explicit theme switching.

.theme-light {
  color-scheme: light;

  // Core Colors
  --primary-color: #{$primary-color}; // Uses base $primary-color from tokens.scss
  --secondary-color: #{$secondary-color};
  --success-color: #{$success-color};
  --danger-color: #{$danger-color};
  --warning-color: #{$warning-color};
  --info-color: #{$info-color};

  // Backgrounds & Surfaces
  --background-color-main: #fff; // As defined in :root
  --surface-color: #{$light-gray}; // As defined in :root

  // Text Colors
  --text-color: #{$dark-gray};
  --text-on-surface-color: #{$dark-gray};
  // --text-muted-color: #{lighten($dark-gray, 25%)}; // Old single
  --text-muted-on-bg-color: #6c757d;
  --text-muted-on-surface-color: #5a6268;
  --text-color-headings: #{$dark-gray};

  // Borders
  --border-color: #{$border-color}; // $border-color is $light-gray from tokens.scss

  // Non-color tokens (these are typically not themed but set for consistency)
  --border-radius: #{$border-radius};
  --border-radius-lg: calc(#{$border-radius} * 2);
  --border-width: #{$border-width};

  --box-shadow-sm: #{$box-shadow-sm};
  --box-shadow: #{$box-shadow};
  --box-shadow-lg: #{$box-shadow-lg};

  // Input specific colors
  --input-background-color: #fff;
  --input-text-color: #{$dark-gray};
  --input-border-color: #{$border-color};
  --input-focus-border-color: #{lighten($primary-color, 25%)};
  --input-focus-box-shadow: 0 0 0 0.2rem #{rgba($primary-color, 0.25)};
  --input-placeholder-color: #{lighten($dark-gray, 40%)};

  // Specific component colors (examples)
  --dialog-bg-color: var(--surface-color);
  --dialog-border-color: var(--border-color);
  --media-background-color: #000;
  --media-border-color: var(--border-color);

  // Activity Indicator colors
  --audio-pulse-inactive-color: #{lighten($dark-gray, 50%)};
  --audio-pulse-low-color: #{$primary-color};
  --audio-pulse-medium-color: #{$warning-color};
  --audio-pulse-high-color: #{$danger-color};

  // Tooltip
  --tooltip-bg-color: #{$dark-gray};
  --tooltip-text-color: #{$light-gray};

  --border-color-soft: #{lighten($border-color, 5%)}; // From tokens.scss

  // Interactive States (matching :root defaults from tokens.scss)
  --primary-color-hover: #{darken($primary-color, 7.5%)};
  --primary-color-active: #{darken($primary-color, 10%)};
  --primary-color-focus-shadow: #{rgba($primary-color, 0.25)};
  --secondary-color-hover: #{darken($secondary-color, 7.5%)};
  --secondary-color-active: #{darken($secondary-color, 10%)};
  --success-color-hover: #{darken($success-color, 7.5%)};
  --success-color-active: #{darken($success-color, 10%)};
  --danger-color-hover: #{darken($danger-color, 7.5%)};
  --danger-color-active: #{darken($danger-color, 10%)};
  --warning-color-hover: #{darken($warning-color, 7.5%)};
  --warning-color-active: #{darken($warning-color, 10%)};
  --info-color-hover: #{darken($info-color, 7.5%)};
  --info-color-active: #{darken($info-color, 10%)};
  --surface-hover-color: #{rgba(0,0,0,0.03)};
  --surface-active-color: #{rgba(0,0,0,0.05)};
  --surface-selected-color: #{mix($primary-color, $light-gray, 15%)};
  --text-color-on-primary: #{$white};
  --text-color-on-secondary: #{$white};
  --text-color-on-success: #{$white};
  --text-color-on-danger: #{$white};
  --text-color-on-warning: #{$dark-gray};
  --text-color-on-info: #{$white};
  --text-color-on-primary-hover: #{darken(#fff, 15%)};
  --surface-hover-on-primary: #{rgba(#fff, 0.1)};

  // Any SCSS variable redefinitions like `$primary-color: var(--primary-color);` are removed.
  // Components should use `var(--primary-color)` directly, or SCSS functions that consume these CSS vars if needed.
}

// If `tokens.scss` :root provides the light theme by default, this .theme-light class
// primarily serves to explicitly apply light theme settings if needed, or if there's a possibility
// of a different default (e.g., system preference, or no theme applied means basic browser styles).
