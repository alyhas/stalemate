// SCSS for SidePanel component - internal layout and content visibility
@import '../../styles/tokens'; // For using design tokens if needed for colors, fonts, etc.

.side-panel {
  // background: var(--Neutral-00); // Example: Use a token like $surface-color or specific variable
  background-color: $background-color-light; // Assuming light theme, or use CSS var like var(--surface-color)
  display: flex;
  flex-direction: column;
  height: 100%; // Fill the height of .app-sidebar container
  overflow: hidden; // Important: hide content that overflows during collapse
  // width: 100%; // Fill width of parent .app-sidebar. Width is controlled by .app-sidebar.
  // transition: all 0.2s ease-in; // Original transition, review if still needed for things other than width
  font-family: $font-family-base; // Use token
  // border-right: 1px solid var(--gray-600); // Border is on .app-sidebar
  color: var(--text-color); // Use themed text color
  font-size: $font-size-sm; // Approx 13px
  line-height: $line-height-base;

  .hidden {
    display: none !important;
  }

  // Styles for when the panel is "open" (i.e., !props.collapsed)
  &.open {
    .top {
      h2 {
        opacity: 1;
      }
    }

    .log-tabs,
    .log-search-toolbar, // Added .log-search-toolbar
    .indicators,
    .side-panel-container,
    .input-container {
      opacity: 1;
      visibility: visible;
      transition: opacity 0.2s ease-in 0.1s, visibility 0s linear 0.1s, height 0.2s ease-in 0.1s, margin 0.2s ease-in 0.1s, padding 0.2s ease-in 0.1s;
    }

    .log-tabs, .log-search-toolbar { // Specific styles for opening these
      height: auto;
      // Restore margins/paddings if they change on collapse
    }

    .indicators .streaming-indicator span.text { // Assuming text is wrapped in a span
      opacity: 1;
    }
  }

  // Styles for when the panel is "collapsed" (i.e., props.collapsed is true)
  &.collapsed {
    .top {
      h2 {
        opacity: 0;
      }
    }

    .opener {
      // transform: translate(0,0); // Reset transform if any
    }

    .log-tabs,
    .log-search-toolbar, // Added .log-search-toolbar
    .indicators,
    .side-panel-container,
    .input-container {
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.1s ease-out, visibility 0s linear 0.1s, height 0.1s ease-out, margin 0.1s ease-out, padding 0.1s ease-out;
    }

    .log-tabs, .log-search-toolbar { // Specific styles for collapsing these
      height: 0;
      margin-bottom: 0;
      padding-top: 0;
      padding-bottom: 0;
      overflow: hidden;
    }
    .log-tabs { // Keep border hidden for tabs when collapsed
        border-bottom-width: 0;
    }


    .indicators .streaming-indicator span.text { // Assuming text "Streaming" / "Paused" is wrapped
      opacity: 0;
    }
  }

  .top {
    display: flex;
    // width: calc(100% - 45px); // Let it be 100% and padding control inner space
    width: 100%;
    justify-content: space-between;
    align-items: center;
    padding: $spacing-md $spacing-sm; // Use tokens
    border-bottom: $border-width solid var(--border-color); // Use tokens
    flex-shrink: 0;

    h2 {
      color: var(--text-color); // Use token
      // font-family: "Google Sans"; // Consider using $font-family-headings or base
      font-size: $font-size-lg; // Use token
      font-weight: $font-weight-bold; // Use token
      line-height: $line-height-base; // Use token
      margin: 0; // Remove default margin
      opacity: 1; // Default for open state
      transition: opacity 0.2s ease-out 0.1s; // Transition for text
    }
  }

  // Tab Styles for Logger Filter
  .log-tabs {
    display: flex;
    border-bottom: 1px solid var(--border-color, $border-color);
    flex-shrink: 0;
    padding: 0 $spacing-sm; // Horizontal padding
    opacity: 1; // Base for transition
    visibility: visible; // Base for transition
    height: auto; // Base for transition - or specific calculated height
    // transition for opacity, visibility, height, margin, padding (defined in .open/.collapsed)
  }

  .log-search-toolbar {
    padding: $spacing-sm $spacing-sm $spacing-md $spacing-sm; // Top, Hori, Bottom
    flex-shrink: 0;
    opacity: 1; // Base for transition
    visibility: visible; // Base for transition
    height: auto; // Base for transition
    // Transitions will be handled by .open / .collapsed general rules
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .log-search-input {
    width: 100%;
    padding: $spacing-sm;
    padding-right: $spacing-xl; // Space for the clear button
    border: 1px solid var(--border-color, $border-color);
    border-radius: $border-radius;
    font-size: $font-size-base;
    background-color: var(--input-background-color, $white); // Themeable input background
    color: var(--text-color, $dark-gray); // Themeable text color
    line-height: $line-height-base;

    &:focus {
      border-color: $primary-color;
      outline: none;
    }
  }

  .clear-search-button {
    position: absolute;
    right: $spacing-xs;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: var(--text-muted, $dark-gray);
    cursor: pointer;
    font-size: $font-size-lg;
    padding: $spacing-xs;
    line-height: 1;

    &:hover {
      color: var(--text-color, $dark-gray);
    }
  }

  .log-tab-button {
    padding: $spacing-sm $spacing-md;
    border: none;
    background-color: transparent;
    cursor: pointer;
    color: var(--text-muted, $dark-gray);
    font-size: $font-size-base;
    font-family: $font-family-base;
    position: relative;
    transition: color 0.2s ease;
    margin-bottom: -1px; // Overlap parent's border-bottom

    &:hover {
      color: var(--text-color, $dark-gray);
    }

    &.active {
      color: var(--primary-color, $primary-color);
      font-weight: $font-weight-bold;

      &::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background-color: var(--primary-color, $primary-color);
      }
    }
  }

  .opener {
    background: transparent;
    border: 0;
    cursor: pointer;
    color: var(--text-color); // Use token for icon color
    font-size: 1.5rem; // Adjust icon size if needed
    padding: $spacing-xs;
    height: auto; // Remove fixed height
    transition: transform 0.2s ease-in;
    // No specific transform needed here as it's part of .app-sidebar now
  }

  .indicators {
    display: flex;
    padding: $spacing-md $spacing-sm; // Use tokens
    justify-content: flex-end; // Align streaming indicator to the right as Select is gone
    gap: $spacing-md; // Use token
    flex-shrink: 0;
    align-items: center; // Vertically align items

    // .react-select-container style block is now removed.

    .streaming-indicator {
      user-select: none;
      border-radius: $border-radius;
      border: $border-width solid var(--border-color);
      background: var(--surface-color); // Use token
      display: flex;
      // width: 136px; // Allow width to be flexible or fixed based on content
      padding: $spacing-xs $spacing-sm;
      justify-content: center;
      align-items: center;
      gap: $spacing-xs;
      flex-shrink: 0;
      text-align: center;
      // font-family: "Space Mono"; // Use $font-family-monospace or base
      font-size: $font-size-sm;
      transition: opacity 0.2s ease-out 0.1s; // For text part

      &.connected {
        color: $primary-color; // Use token
      }

      span.text { // Wrap "Streaming" / "Paused" text in a span for separate animation
        opacity: 1;
        transition: opacity 0.2s ease-out 0.1s;
      }
    }
  }

  .side-panel-container {
    // width: 400px; // Width is controlled by .app-sidebar
    width: 100%;
    flex-grow: 1;
    overflow-x: hidden; // Content within should not cause horizontal scroll
    overflow-y: auto;   // Allow vertical scroll for content like Logger
    // padding: 0 $spacing-sm $spacing-sm $spacing-sm; // Padding removed, Logger panel will have its own
    // The Logger component itself is now a panel and will have its own padding.
    // This container ensures the Logger (or other content) can scroll if it exceeds height.
    // It might need padding if there are other elements directly within it besides the Logger panel.
    // For now, assuming Logger panel is the primary child.
    // Add a small bottom margin/padding if input-container is directly after it without visual gap
    // Or rely on Logger panel's margin-bottom if set.
    // Let's ensure it fills available space for the Logger panel to sit in.
    display: flex; // To make child (Logger panel) take full height if needed
    flex-direction: column;

    > .logger.panel { // If Logger panel is a direct child
      flex-grow: 1; // Allow Logger panel to take available vertical space
      min-height: 0; // Important for flex children that scroll
    }
  }

  .input-container {
    // height: 50px; // Let height be auto based on content
    flex-shrink: 0; // Prevent shrinking
    border-top: $border-width solid var(--border-color);
    padding: $spacing-md $spacing-sm;
    overflow: hidden; // Keep hidden for transition effect
    background-color: var(--surface-color); // Background for input area section

    .input-content {
      position: relative;
      background: var(--background-color); // Input background
      border: $border-width solid var(--border-color);
      // height: 22px; // Remove fixed height, let padding define it
      border-radius: $border-radius;
      padding: $spacing-sm; // Inner padding for textarea and button container
      display: flex;
      align-items: flex-end; // Align items to the bottom, good for multi-line textarea
      gap: $spacing-sm; // Gap between textarea and button

      // .send-button styles are removed as it's replaced by ControlButton

      .input-area { // Textarea
        flex-grow: 1; // Take available space
        width: 100%; // Ensure it tries to fill
        background-color: var(--input-background-color, $white);
        color: var(--text-color, $dark-gray);
        border: 1px solid var(--border-color, $border-color);
        border-radius: $border-radius;
        padding: $spacing-sm;
        font-family: $font-family-base;
        font-size: $font-size-base;
        line-height: $line-height-base;
        resize: none; // Disable manual resize
        overflow-y: hidden; // Hide scrollbar, height adjusts automatically
        // min-height: calc(#{$line-height-base} * #{$font-size-base} + #{$spacing-sm} * 2 + 2px); // Approx 1 line
        min-height: 2.5rem; // Approx height for a single line with padding
        // max-height: calc((#{$line-height-base} * #{$font-size-base} * 6) + #{$spacing-sm} * 2 + 2px); // ~6 lines
        // Consider adding overflow: auto; if max-height is set and content exceeds it.

        &:focus {
          border-color: $primary-color;
          outline: none;
          // box-shadow: 0 0 0 0.2rem rgba($primary-color, 0.25); // Optional focus shadow
        }
      }

      .input-content-placeholder {
        position: absolute;
        left: $spacing-sm + $spacing-xs; // Match input-area padding
        top: $spacing-sm + $spacing-xs; // Match input-area padding
        // display: flex; // Not needed
        // align-items: center; // Not needed
        // height: 100%; // Not needed
        // width: 100%; // Not needed
        pointer-events: none;
        user-select: none;
        // padding: 0px 18px; // Remove, use left/top
        white-space: pre-wrap;
        color: var(--text-muted); // Placeholder color
      }
    }
  }
}

// Remove explicit width settings based on .open, rely on .app-sidebar and its transitions
// .side-panel.open {
//   width: 400px; // This is now controlled by .app-sidebar
// }

// react-select specific styling should be checked if it needs token updates
// For example, var(--Neutral-15) etc. should be mapped to tokens.
// This was in a separate react-select.scss import, so may need attention if not done.
// Assuming base styles for react-select are handled or tokens are injected there.

// Ensure that when the side-panel is collapsed (meaning .app-sidebar is narrow),
// the text within various elements like titles, indicators, and input placeholders
// is hidden gracefully. Opacity transitions are preferred.
// The .collapsed class on .side-panel itself is used above to trigger these.

// Color variables like var(--Neutral-00) should be replaced with SCSS tokens
// e.g. $background-color-light, $surface-color, etc. or CSS variables from themes.
// For now, I've used some direct token replacements assuming a light theme context
// or that CSS variables like --text-color are correctly set by the theme.
// A full theming pass on this component's specific SCSS might be needed separately.

// Example: Ensure streaming indicator text is hidden when collapsed
.side-panel.collapsed .indicators .streaming-indicator span.text {
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.1s ease-out, visibility 0s linear 0.1s;
  width: 0; // Collapse width of text span
  display: inline-block; // To allow width change
  overflow: hidden; // Hide text during transition
  white-space: nowrap; // Prevent wrapping
}

.side-panel.open .indicators .streaming-indicator span.text {
  opacity: 1;
  visibility: visible;
  width: auto; // Allow text to take its natural width
  transition: opacity 0.2s ease-in 0.1s, width 0.2s ease-in 0.1s;
}

// Ensure console h2 is hidden
.side-panel.collapsed .top h2 {
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.1s ease-out, visibility 0s linear 0.1s;
}
.side-panel.open .top h2 {
  opacity: 1;
  visibility: visible;
  transition: opacity 0.2s ease-in 0.1s;
}

// Styles for .react-select-container in open/collapsed states are removed.
// The main .react-select-container style block should be removed separately if still present.
