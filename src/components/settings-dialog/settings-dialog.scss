@import '../../styles/tokens';
@import '../../styles/typography';
// Import inputs if its styles are not globally available via main.scss, or for mixins/extends
// @import '../../styles/components/inputs';

// Styles for the main wrapper around the settings icon/button
.settings-dialog {
  // This class is on the div that contains the settings button and the dialog itself.
  // It might not need much styling if the button is a ControlButton and dialog is positioned.
  // display: flex; // Original, might not be needed if button is standalone
  // align-items: center;
  // justify-content: center;
  // gap: $spacing-xs; // Original
  // height: 70px; // Original, likely for old layout. Remove if not needed.

  // The button that opens the dialog (assuming it's a ControlButton or styled like one)
  > .control-button { // If the button is a direct child
    // Specific styles if needed, otherwise ControlButton defaults apply
  }

  // The <dialog> element itself
  .dialog {
    // Reset browser default dialog styles
    border: none;
    padding: 0;
    background-color: var(--dialog-bg-color);
    border-radius: var(--border-radius-lg, $border-radius-lg);
    box-shadow: var(--box-shadow-lg, $box-shadow-lg);
    max-width: 600px;
    width: 90vw;
    // Adding base transition for dialog theme properties
    transition: background-color $default-transition-duration $default-transition-timing-function,
                box-shadow $default-transition-duration $default-transition-timing-function;
    
    // Positioning & Initial Animation State (Hidden)
    position: fixed;
    top: 50%;
    left: 50%;
    // Start slightly up and smaller, centered, then move to exact center and full size
    transform: translate(-50%, -50%) scale(0.95);
    // transform: translate(-50%, -60%) scale(0.95); // Example: starts higher
    opacity: 0;
    visibility: hidden;
    z-index: 1050; // Above backdrop
    transition: opacity 0.2s ease-out, transform 0.2s ease-out, visibility 0s linear 0.2s;

    &.dialog-open {
      opacity: 1;
      visibility: visible;
      transform: translate(-50%, -50%) scale(1); // End state: centered and full size
      transition-delay: 0s, 0s, 0s; // Apply visibility change immediately when opening
    }
  }

  .dialog-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: var(--backdrop-bg-color, #{rgba($black, 0.3)});
    z-index: 1040;
    opacity: 0;
    visibility: hidden;
    // Transition for backdrop fade
    transition: opacity $default-transition-duration ease-out,
                visibility 0s linear $default-transition-duration,
                background-color $default-transition-duration $default-transition-timing-function;


    &.active {
      opacity: 1;
      visibility: visible;
      transition-delay: 0s;
    }
  }

  .dialog-container {
    box-sizing: border-box;
    padding: $spacing-xl; // Generous padding for content area
    max-height: 80vh; // Example max height for scrollability
    overflow-y: auto;
    overflow-x: hidden; // Not expecting horizontal scroll in dialog content
  }

  .connected-indicator {
    // Assuming --warning-bg-color and --warning-text-color will be defined in themes
    // For now, let's use a more generic approach or ensure these are added to tokens.scss
    // Using existing tokens for a similar visual:
    background-color: var(--warning-bg-color);
    color: var(--warning-text-color);
    padding: $spacing-md;
    border-radius: var(--border-radius, $border-radius);
    margin-bottom: $spacing-lg;
    font-size: $font-size-sm;
    transition: background-color $default-transition-duration $default-transition-timing-function,
                color $default-transition-duration $default-transition-timing-function;
    text-align: center;

    p {
      margin: 0;
    }
  }

  .settings-category {
    margin-bottom: $spacing-xl;

    &:last-child {
      margin-bottom: 0;
    }
    // Optional: add border between categories
    // border-bottom: 1px solid var(--border-color);
    // padding-bottom: $spacing-xl;
    // &:last-child { border-bottom: none; padding-bottom: 0; }
  }

  .settings-category-title {
    font-size: $font-size-lg;
    font-weight: $font-weight-bold;
    color: var(--text-color-headings);
    margin-top: 0;
    margin-bottom: $spacing-lg;
    display: flex;
    align-items: center;
    transition: color $default-transition-duration $default-transition-timing-function;
  }

  .settings-category-icon {
    margin-right: $spacing-md;
    font-size: $font-size-xl;
    color: var(--primary-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }

  .settings-category-content {
    // General content wrapper, specific layouts like form-grid go inside this
    // Add default bottom margin for elements within content if needed
    > *:not(:last-child) {
      margin-bottom: $spacing-md;
    }
    // For .select-group which might be direct children:
    // .select-group is styled below, its margin is handled by form-grid gap or direct styling.
    // .select-group:not(:last-child) {
    //      margin-bottom: $spacing-md; // This might be redundant if it's part of form-grid
    // }
  }

  // Specific layout for forms within categories
  .form-grid {
    display: grid;
    // grid-template-columns: auto 1fr; // Label takes auto, input takes rest
    // A more robust approach for label-input pairs on separate lines or responsive:
    grid-template-columns: 1fr; // Each field takes full width by default
    gap: $spacing-md; // Gap between form fields/rows

    @media (min-width: $breakpoint-sm) { // Two columns on larger screens
      grid-template-columns: auto 1fr;
      gap: $spacing-md $spacing-lg; // Row gap, Column gap
    }

    label {
      font-weight: $font-weight-normal; // Standard label weight
      // text-align: right; // If using auto 1fr grid and want labels right-aligned
      // padding-right: $spacing-lg; // If right-aligning labels
      margin-bottom: $spacing-xs; // Space below label if it's above input on small screens
      display: block; // Ensure label takes its own line on small screens if not in grid column
      @media (min-width: $breakpoint-sm) {
        display: inline; // Default display for labels in two-column grid
        margin-bottom: 0;
        text-align: left; // Default
      }
    }
    // Ensure inputs take full width of their grid cell
    .form-control, .react-select-container, .gender-input-group { // Ensure react-select also takes full width in grid
      width: 100%;
    }
    .gender-input-group {
      display: flex;
      align-items: center;
      gap: $spacing-sm;
      // Ensure checkbox and span are aligned with other form controls if label is on top
      // This might require adjusting the grid cell for the label of the checkbox.
      // For now, assumes label is part of the same grid cell or handled by .form-field structure.
    }
  }

  // .form-field can be used to group label and input if not using direct grid cell placement for each.
  // If .form-grid directly places labels and inputs in cells, .form-field specific layout might be less critical.
  // However, it's good for semantic grouping and consistent margin if used outside a direct grid assignment for label/input.
  .form-field {
    display: flex;
    flex-direction: column;
    // margin-bottom: $spacing-md; // Handled by form-grid gap if it's a grid item

    label { margin-bottom: $spacing-xs; }
  }


  // Select Group (for react-select wrappers: label + select)
  .select-group {
    display: flex;
    flex-direction: column;
    gap: $spacing-xs;

    & > label {
      font-size: $font-size-base;
      font-weight: $font-weight-normal;
      color: var(--text-color); // Ensure label color is themed
    }
  }


  // Function Declarations Area
  .function-declarations {
    // font-size: 66%; // Original - too small. Let children define font size or use $font-size-sm.
    width: 100%;
  }

  .fd-rows {
    display: grid;
    grid-template-columns: minmax(120px, 1.5fr) minmax(100px, 1fr) 2fr; // Adjusted for better flexibility
    gap: $spacing-sm;
    align-items: center; // Vertically align items in each row
  }

  .fd-row-name {
    font-family: $font-family-monospace;
    font-size: $font-size-sm;
    font-weight: $font-weight-bold;
    color: var(--primary-color);
    border-radius: var(--border-radius, $border-radius);
    border: 1px solid var(--border-color);
    padding: $spacing-sm;
    word-break: break-all;
    transition: color $default-transition-duration $default-transition-timing-function,
                border-color $default-transition-duration $default-transition-timing-function;
  }

  .fd-row-args {
    padding: $spacing-sm;
    font-size: $font-size-xs;
    color: var(--text-muted-on-surface-color); // Dialog is a surface
    word-break: break-all;
    transition: color $default-transition-duration $default-transition-timing-function;

    > span:not(:last-child)::after {
      content: ", ";
    }
  }

  .fd-row-description.form-control {
    background: transparent; // This already has its own hover/focus transitions for bg/border
    border: 1px solid transparent;
    color: var(--text-color);
    font-size: $font-size-sm;
    padding: $spacing-xs;
    height: auto;
    // Transitions for background, border-color are already part of its hover/focus states
    // Add transition for text color if it can change with theme
    transition: color $default-transition-duration $default-transition-timing-function;


    &:hover {
      background: var(--surface-hover-color);
      border-color: var(--border-color);
    }
    &:focus {
      background: var(--surface-hover-color);
      border-color: var(--primary-color);
      box-shadow: none;
    }
  }

  // Cleanup old specific styles that are now handled by tokens or component classes
  h4 { // Original h4 for "Function declarations" - now an h3.settings-category-title
    // margin-left: 4px;
    // margin-bottom: 10px;
    // These are handled by .settings-category-title now
  }

  // General button style within dialog - should use ControlButton or .btn
  // button {
  //   background: none; // Handled by ControlButton or .btn
  //   border: 0; // Handled by ControlButton or .btn
  // }

  // .mode-selectors, .custom-instructions, textarea.system are removed from JSX
  // Their styles can be removed if not used by any other part.
  .mode-selectors { display: none; }
  .custom-instructions { display: none; } // Assuming these are fully replaced
  textarea.system { display: none; }

}

// Ensure the dialog is hidden by default if not using JS to add/remove from DOM
// This relies on the <dialog> element's `open` attribute or direct style manipulation by JS.
// If using direct style:
// .settings-dialog .dialog {
//   display: none;
// }
// .settings-dialog .dialog.is-open { // Or similar class toggled by JS
//   display: block; // Or flex/grid depending on desired centering
// }
