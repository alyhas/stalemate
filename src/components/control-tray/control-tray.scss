@import '../../styles/tokens';
@import '../../styles/components/buttons'; // To potentially use .btn or its mixins
@import '../../styles/animations'; // If opacity-pulse were global

// Variables from old file (approximate mapping to new tokens)
// --Neutral-20 -> $light-gray
// --Neutral-60 -> $dark-gray
// --Neutral-2 -> #fff (assuming it was very light)
// --Neutral-80 -> darken($dark-gray, 20%) (approx)
// --Neutral-30 -> lighten($light-gray, 10%) (approx)
// --Neutral-5 -> #fff (or very-light-gray like $surface-color-light from themes)
// --Blue-800 -> darken($primary-color, 15%)
// --Blue-500 -> $primary-color
// --accent-red / --Red-500 -> $danger-color
// --Red-400 -> lighten($danger-color, 10%)

// Main container for this specific control tray implementation
.control-tray-component { // Renamed from .control-tray to avoid conflict with global layout class
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translate(-50%, 0);
  display: inline-flex;
  justify-content: center;
  align-items: flex-start;
  gap: $spacing-sm; // 8px
  padding-bottom: $spacing-lg; // Approx 18px, using token (24px)

  // Class for disabled state on action buttons within this component
  .disabled .action-button, // Keep this structure if TSX relies on it
  .action-button.disabled {
    background: transparent;
    border-color: $light-gray; // Was --Neutral-30
    color: $light-gray; // Was --Neutral-30
  }
}

// General .action-button styles are now removed as ControlButton provides its own base.
// Specific variant styles like .mic-button and .connect-toggle will apply on top of ControlButton.

// Style for elements that look like a control-button but are not interactive
.control-button.no-action {
  pointer-events: none;
}

// Specific button for microphone
// These styles will apply to <ControlButton className="mic-button" ... />
.control-button.mic-button {
  // No need to @extend .action-button as that's gone.
  // ControlButton already has base styles. Add or override specific things for mic.
  position: relative; // For ::before pseudo-element
  background-color: $danger-color !important; // Override ControlButton's default/active bg
  color: $white !important; // Ensure contrast with danger color
  z-index: 1; // For pseudo-element stacking

  // Ensure hover/active states from ControlButton are either appropriate or overridden here.
  &:not(:disabled):hover {
    background-color: lighten($danger-color, 10%) !important;
  }
  // Active state from ControlButton might be fine, or override if needed.

  // Focus state for mic-button (if different from default ControlButton focus)
  &:focus, &.focus {
    // ControlButton has a default focus. Override if mic needs a specific one.
    // e.g., outline-color: $danger-color;
    // For now, assume ControlButton's default focus is acceptable.
    // If ControlButton's default focus includes a box-shadow, and it's not desired here:
    // box-shadow: none;
  }
  color: $white; // Assuming black was for contrast with a lighter red

  // Volume pulse animation
  &::before {
    position: absolute;
    z-index: -1; // Behind the button's content
    top: calc(var(--control-tray-mic-volume, 0px) * -1); // Uses CSS variable set by JS
    left: calc(var(--control-tray-mic-volume, 0px) * -1);
    display: block;
    content: "";
    opacity: 0.35;
    background-color: $danger-color;
    width: calc(100% + var(--control-tray-mic-volume, 0px) * 2);
    height: calc(100% + var(--control-tray-mic-volume, 0px) * 2);
    border-radius: 18px; // Match ControlButton's border-radius if pulse should align with it
    // Or keep 24px if a slightly larger pulse aura is desired. Let's try to match.
    // border-radius: $border-radius + 6px; // Example: slightly larger than button's radius
    transition: all 0.02s ease-in-out; // Fast transition for pulse effect
    content: ""; // Required for pseudo-elements
    opacity: 0.35; // Original opacity
  }
}

// Disabled state for mic button (styling the ::before pseudo-element)
// ControlButton already has a :disabled state for the button itself.
// This targets the ::before for the pulse animation.
.control-button.mic-button:disabled::before {
  background: transparent;
}

// Connect toggle button specifics
// Styles for <ControlButton className="connect-toggle" ... />
.control-button.connect-toggle {
  // Default ControlButton styles apply.
  // Override for specific states if ControlButton's defaults aren't enough.

  // Example: If connect-toggle needs different active state color than default ControlButton.active
  // &.active:not(:disabled) {
  //   background-color: darken($primary-color, 15%) !important; // Was --Blue-800 for connected
  //   color: $primary-color !important; // Was --Blue-500 for connected
  // }

  // Styles for when it's "off" (not connected)
  &:not(.active):not(:disabled) { // .active is equivalent to "connected" prop
    background-color: $primary-color !important; // Was --Blue-500 for "off" state
    color: $white !important; // Was --Neutral-5 for "off" state text
  }

  // Focus state (if different from ControlButton default)
  // &:focus, &.focus {
  //   outline-color: $primary-color; // Example
  // }
}

// Container for connection status (button and text)
.connection-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: $spacing-xs; // 4px

  .connection-button-container {
    border-radius: 27px; // Specific
    border: 1px solid $light-gray; // Was --Neutral-30
    background: $white; // Was --Neutral-5
    padding: $spacing-sm; // 10px, using token (8px)
  }

  .text-indicator {
    font-size: $font-size-sm * 0.8; // Approx 11px, using token (14px*0.8=11.2px)
    color: $primary-color; // Was --Blue-500
    user-select: none;
  }

  &:not(.connected) {
    .text-indicator {
      opacity: 0;
    }
  }
}

// Navigation section for actions
.actions-nav {
  background: $white; // Was --Neutral-5
  border: 1px solid $light-gray; // Was --Neutral-30
  border-radius: 27px; // Specific
  display: inline-flex;
  gap: $spacing-sm; // 12px, using token (8px, or $spacing-md for 16px)
  align-items: center;
  overflow: hidden; // Was clip, overflow:hidden is more standard
  padding: $spacing-sm; // 10px, using token (8px)
  transition: all 0.6s ease-in; // Keep transition

  > * { // Direct children
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: $spacing-md; // Was 1rem (16px)
  }
}

// Local animation, could be moved to animations.scss if used elsewhere
@keyframes control-tray-opacity-pulse {
  0% { opacity: 0.9; }
  50% { opacity: 1; }
  100% { opacity: 0.9; }
}

// Apply the animation to buttons if desired (was on .action-button by default)
// .action-button {
//   animation: control-tray-opacity-pulse 3s ease-in infinite;
// }

// CSS Property for mic volume animation
@property --control-tray-mic-volume {
  syntax: "<length>";
  inherit: false;
  initial-value: 0px;
}
