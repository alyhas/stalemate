@import '../../styles/tokens'; // For design tokens
@import '../../styles/components/panels'; // To ensure .panel styles are available if not globally applied

// .logger is now also .panel. Panel base styles (bg, border, shadow) are applied by .panel class.
// These styles refine the panel for Logger specific needs.
.logger.panel {
  height: 100%;
  display: flex;
  flex-direction: column;
  background-color: var(--background-color-main);
  transition: background-color $default-transition-duration $default-transition-timing-function;


  .panel-body {
    overflow-y: auto;
    flex-grow: 1;
    padding: $spacing-md;
    color: var(--text-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }

  .logger-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
    width: 100%;
  }

  // Color updates using CSS variables
  .user h4 {
    color: var(--success-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }

  .model h4 {
    color: var(--info-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }

  .rich-log {
    gap: $spacing-xs;
    display: block;

    // SyntaxHighlighter renders into a <pre> which has its own theme (e.g. okaidia dark bg)
    // No general <pre> styling needed here if SyntaxHighlighter is always used for code/json.

    h4 { // Role indicator (User/Model)
      font-size: $font-size-base;
      text-transform: uppercase;
      padding: $spacing-xs 0;
      margin: 0;
      font-weight: $font-weight-bold;
    }

    h5 { // Part title (e.g., executableCode, functionCall)
      margin: 0 0 $spacing-xs 0;
      padding-bottom: $spacing-xs;
      border-bottom: var(--border-width, $border-width) solid var(--border-color);
      font-size: $font-size-sm;
      font-weight: $font-weight-normal;
      color: var(--text-muted-color);
      transition: border-color $default-transition-duration $default-transition-timing-function,
                  color $default-transition-duration $default-transition-timing-function;
    }

    .part {
      padding: $spacing-xs 0;
      margin-bottom: $spacing-sm;
      color: var(--text-color);
      border-radius: var(--border-radius, $border-radius);
      transition: color $default-transition-duration $default-transition-timing-function;
      // background-color potentially if .part-text gets a background

      &.part-text {
        // transition for background-color if added above
      }
    }
  }

  .plain-log { // This is the <li> itself
    & > * {
      padding-right: $spacing-xs;
    }
  }

  .inline-code:not(:last-child) {
    font-style: italic;
    // background-color: var(--surface-color); // Optional bg for inline code
    // padding: 0 $spacing-xs;
    // border-radius: $border-radius-sm;
    &::after {
      content: ", ";
    }
  }

  .log-collapse-toggle {
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    font-size: $font-size-sm;
    padding: $spacing-xs 0;
    margin-top: $spacing-xs;
    display: block;
    text-align: left;
    transition: color $default-transition-duration $default-transition-timing-function;

    &:hover {
      text-decoration: underline;
    }
  }
}

// Styling for individual log list items (li elements, which are .plain-log)
.logger li.plain-log {
  display: block;
  padding: $spacing-xs $spacing-sm;
  color: var(--text-muted-color);
  font-size: $font-size-sm;
  line-height: $line-height-base;
  border-bottom: 1px solid var(--border-color);
  transition: color $default-transition-duration $default-transition-timing-function,
              border-color $default-transition-duration $default-transition-timing-function;
  &:last-child {
    border-bottom: none;
  }
}

.logger li .timestamp {
  display: inline-block;
  margin-right: $spacing-sm;
  flex-grow: 0;
  flex-shrink: 0;
  color: var(--text-muted-color);
  transition: color $default-transition-duration $default-transition-timing-function;
}

.logger li .source {
  flex-shrink: 0;
  font-weight: $font-weight-bold;
  margin-right: $spacing-sm;
  // Color for source text will be set by type-specific classes below
}

// Specific source colors using CSS variables
.logger li.source-server,
.logger li.receive {
  // color: var(--info-color);
  .source {
    color: var(--info-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }
}

.logger li.source-client,
.logger li.send:not(.source-server) {
  // color: var(--success-color);
  .source {
    color: var(--success-color);
    transition: color $default-transition-duration $default-transition-timing-function;
  }
}

.logger li .count {
  background-color: var(--surface-color);
  font-size: $font-size-xs;
  padding: calc(#{$spacing-xs} * 0.5) $spacing-xs;
  line-height: 1;
  vertical-align: middle;
  border-radius: var(--border-radius, $border-radius);
  color: var(--text-muted-color);
  margin-left: $spacing-xs;
  transition: background-color $default-transition-duration $default-transition-timing-function,
              color $default-transition-duration $default-transition-timing-function;
}

.logger li .message {
  flex-grow: 1;
  color: var(--text-color);
  word-break: break-word;
  transition: color $default-transition-duration $default-transition-timing-function;
}
